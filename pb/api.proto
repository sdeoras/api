syntax = "proto3";

package pb;

// Lambda service is a provider of various lambda services
service Lambda {
    // Email service sends email
    rpc Email(EmailRequest) returns (EmailResponse) {}
    // InferImage applies trained model on input image for inferring labels
    rpc InferImage(stream InferImageRequest) returns (InferImageResponse) {}
    // GAN generator
    rpc Gan(GanRequest) returns (stream GanResponse) {}
    // Gallery Display of images
    rpc Gallery(GalleryRequest) returns (GalleryResponse) {}
    // Config fetches config parameters
    rpc Config(ConfigRequest) returns (ConfigResponse) {}
    // GetUserInfo retrieves user info
    rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse) {}
    // SetUserInfo sets user info
    rpc SetUserInfo(SetUserInfoRequest) returns (SetUserInfoResponse) {}
}

// Monitor service is for clients to request monitor data from the server.
// Server responds by sending a streaming data.
service Monitor {
    rpc Query(Empty) returns (stream Data) {}
}

// Server sends acknowledgement
message Empty {
}

// ListOfString is a list of strings
message ListOfString {
    repeated string value = 1;
}

// EmailRequest is the request to send email. This data is streamed from client
// to the server.
message EmailRequest {
    string to_email = 1;
    string to_name = 2;
    string from_email = 3;
    string from_name = 4;
    string subject = 5;
    bytes body = 6;
}

// EmailResponse is the response from the server after email is sent.
message EmailResponse {
    int64 status_code = 1;
    string body = 2;
    map<string, ListOfString> headers = 3;
}

// InferImageRequest takes a list of images (as bytes) and model and label file path URIs.
message InferImageRequest {
    // List of images
    repeated Image images = 1;
    // Model name.
    // Model files (.pb and .txt) exist in a folder by this name in
    // designated object store.
    string model_name = 2;
    // Model version is the version number of the model
    string model_version = 3;
}

// Image consists of a name and bytes
message Image {
    string name = 1;
    bytes data = 2;
}

// InferImageResponse is a list of output, one per input image.
message InferImageResponse {
    repeated InferOutput outputs = 1;
}

// InferOutput consists of a name, inferred label and probability for that label.
message InferOutput {
    string name = 1;
    string label = 2;
    int64 probability = 3;
}

message GanRequest {
    // Model name.
    // Model files (.pb) exist in a folder by this name in
    // designated object store.
    string model_name = 1;
    // Model version is the version number of the model
    string model_version = 2;
    // Number of images to generate
    int64 count = 3;
}

// InferImageRequest takes a list of images (as bytes) and model and label file path URIs.
message GanResponse {
    // List of images
    repeated Image images = 1;
}

// Checkpoint is a struct storing weights and biases
message Checkpoint {
    // weights stores different weights against a string label
    map<string, Variable> weights = 1;
    // biases stores different biases against a string label
    map<string, Variable> biases = 2;
}

// Variable is basically a buffer and its size
message Variable {
    repeated float data = 1;
    repeated int64 size = 2;
}

// Data is basically just a byte buffer.
message Data {
    string tag = 1;
    bytes data = 2;
}

// GalleryRequest is a request to gallery maker. It contains filenames in object store
// that are publicly available.
message GalleryRequest {
    repeated GalleryItem gallery_items = 1;
}

// GalleryItem is a individual items for gallery presentation
message GalleryItem {
    int64 id = 1;
    string file_name = 2;
    string title = 3;
    string caption = 4;
    string bucket_name = 5;
}

// GalleryResponse is an empty response.
message GalleryResponse {}

// ConfigRequest is a message used to get config parameters
message ConfigRequest {}

// ConfigResponse is a set of config parameters for lambda functions.
// Currently these are all lumped into one struct but this will
// get divided into sub structs later on.
message ConfigResponse {
    // name of lambda function
    string func_name = 1;
    // code location of lambda function
    string code_location = 2;
    // domain of lambda function
    string domain = 3;
    // bucket name to use
    string bucket_name = 4;

    // oauth request to send to various providers
    OAuthRequest oauth = 5;

    // jwt secret passphrase
    string jwt_secret = 6;

    // google cloud project id
    string project_id = 7;
}

// OAuthRequest is a collection of all supported oauth providers
message OAuthRequest {
    // Google as oauth provider
    GoogleOAuthRequest google = 1;
}

// GoogleOAuthRequest is used to send oauth request to google oauth provider
message GoogleOAuthRequest {
    // client id for oauth2
    string client_id = 1;
    // client secret for oauth2
    string client_secret = 2;
}

// GoogleOAuthResponse is used to deserialize the response from google oauth provider
message GoogleOAuthResponse {
    // id of the user
	string id = 1;
    // email of the user
    string email = 2;
    // verified email of the user
    string verified_email = 3;
    // link of user public profile
    string link = 4;
    // link to user public picture
    string picture = 5;
}

message GetUserInfoRequest {
    UserMeta user_meta = 1;
}

// GetUserInfoResponse is the information to store per user account
message GetUserInfoResponse {
    UserMeta user_meta = 1;
    // HealthCheckEndPoints is the list of http end points for which user would like to request
    // health checks
    HealthCheckEndPoints health_check_end_points = 2;
}

// SetUserInfoRequest is the information to store per user account
message SetUserInfoRequest {
    UserMeta user_meta = 1;
    // HealthCheckEndPoints is the list of http end points for which user would like to request
    // health checks
    HealthCheckEndPoints health_check_end_points = 2;
}

// SetUserInfoResponse is the response after setting user info.
message SetUserInfoResponse {}

message UserMeta {
    // UserName is the user name.
    string user_name = 1;
    // UserId is the id for the user.
    int64 user_id = 2;
    // UserEmail is the email for the user.
    string user_email = 3;
}

message HealthCheckEndPoints {
    repeated string url = 1;
}